name: Build and Deploy Docker Image

on:
  push:
    branches: [ "dev" ]

#  pull_request:
#    branches: [ "main" ]


jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Preset Image Name
        run: echo "IMAGE_URL=$(echo ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:$(echo ${{ github.sha }} | cut -c1-7) | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Build and push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.IMAGE_URL }}

      - name: Deploy Image to CapRrover
        uses: caprover/deploy-from-github@v1.1.2
        with:
          server: "${{ secrets.CAPROVER_SERVER }}"
          app: "${{ secrets.APP_NAME }}"
          token: "${{ secrets.APP_TOKEN }}"
          image: ${{ env.IMAGE_URL }}






#name: Vercel Production Deployment
#
#env:
#  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
#  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
#
#on:
#  push:
#    branches:
#      - 'master'
#
#jobs:
#  Testing:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Get code from repository
#        uses: actions/checkout@v3
#
#      - run: npm install
#      - run: npx playwright install
#      - run: npm run test:prod
#      - run: npm run coverage
#
#  Deploy-Production:
#    needs: Testing
#    runs-on: ubuntu-latest
#    steps:
#      - name: Get code from repository
#        uses: actions/checkout@v3
#
#      - name: Install Vercel CLI
#        run: npm install --global vercel
#
#      - name: Pull Vercel Enviroment Information
#        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
#
#      - name: Build Project Artifacts
#        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
#
#      - name: Deploy Project Artifacts
#        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
